#!/bin/bash

# ----------------------------------------------------------------------------------------------------------------------
#
# LocaleDB management script.
#
# ----------------------------------------------------------------------------------------------------------------------
#
# Project home
#     https://github.com/momacs/localedb
#
# Contributors
#     Tomek D Loboda; 2020.06.08 - present
#         The original idea, design, and implementation; data import
#     Brandon Rose; 2020.09.24 - present
#         Design feedback; data import
#     Travis; 2020.11.02 - present
#         Data import
#     Scott Haleen; 2020.09.24 - 2020.12.01
#         Dockerization; data import
#
# ----------------------------------------------------------------------------------------------------------------------

set -e

declare -r is_verbose=1

declare -r pg_host=db
declare -r pg_port=5432
declare -r pg_port_ext=5433
declare -r pg_schema_main=main
declare -r pg_schema_dis=dis
declare -r pg_schema_geo=geo
declare -r pg_schema_pop=pop
declare -r pg_schema_vax=vax
declare -r pg_schema_health=health
declare -r pg_schema_weather=weather
declare -r pg_schema_mobility=mobility
declare -r pg_db=localedb
declare -r pg_usr=postgres
declare -r pg_pwd=sa
declare -t pg_conn_str=postgresql://${pg_usr}:${pg_pwd}@${pg_host}:${pg_port}/${pg_db}
    # ?sslmode=require

declare -r dir_root=/usr/share/localedb
declare -r dir_bin=$dir_root/bin
declare -r dir_data=$dir_root/data
declare -r dir_data_dis=$dir_data/dis
declare -r dir_data_geo=$dir_data/geo
declare -r dir_data_health=$dir_data/health
declare -r dir_data_mobility=$dir_data/mobility
declare -r dir_data_pop=$dir_data/pop
declare -r dir_data_weather=$dir_data/weather
declare -r dir_data_vax=$dir_data/vax
declare -r dir_log=$dir_root/log
declare -r dir_pg_data=$dir_root/pg
declare -r dir_rt=$dir_root/rt
declare -r dir_schemas=$dir_root/schemas

declare -r file_pg_dump=$dir_data/dumpfile

declare -r self_name=$(basename $0)
declare -r self_path=$(dirname $0)
declare -r cmd=$1
declare -r usage="Usage: $self_name $cmd"

declare -r cmd_dl="wget -q"
declare -r cmd_dropdb="dropdb -h $pg_host -p $pg_port -U $pg_usr --if-exists $pg_db"
declare -r cmd_createdb="createdb -h $pg_host -p $pg_port -U $pg_usr $pg_db"
declare -r cmd_dump="pg_dump -h $pg_host -p $pg_port -U $pg_usr -c -Fc $pg_db > $file_pg_dump"
declare -r cmd_restore="pg_restore -h $pg_host -p $pg_port -U $pg_usr -d $pg_db $file_pg_dump"
declare -r cmd_pg_isready="pg_isready -t 60 -q -h $pg_host -p $pg_port -U $pg_usr"
declare -r cmd_psql="psql $pg_conn_str -q"
declare -r cmd_py="python3 $dir_bin/localedb_man.py $pg_host 5432 $pg_usr $pg_pwd $pg_db $pg_schema_dis $pg_schema_geo $pg_schema_main $pg_schema_pop $pg_schema_vax $pg_schema_health $pg_schema_weather $pg_schema_mobility $dir_data $dir_log $dir_rt"
declare -r cmd_shp2pgsql="shp2pgsql -W latin1 -a -s 4269 $dir_rt"

[ $is_verbose == 1 ] && declare -r out=" /dev/stdin" || declare -r out=" /dev/null"


# ----------------------------------------------------------------------------------------------------------------------
declare -a st_name=("AL" "AK" "AZ" "AR" "CA" "CO" "CT" "DE" "DC" "FL" "GA" "HI" "ID" "IL" "IN" "IA" "KS" "KY" "LA" "ME" "MD" "MA" "MI" "MN" "MS" "MO" "MT" "NE" "NV" "NH" "NJ" "NM" "NY" "NC" "ND" "OH" "OK" "OR" "PA" "RI" "SC" "SD" "TN" "TX" "UT" "VT" "VA" "WA" "WV" "WI" "WY" "AS" "GU" "MP" "PR" "VI")
    # in geo but not pop: AS GU MP PR VI

declare -a st_fips=("01" "02" "04" "05" "06" "08" "09" "10" "11" "12" "13" "15" "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "27" "28" "29" "30" "31" "32" "33" "34" "35" "36" "37" "38" "39" "40" "41" "42" "44" "45" "46" "47" "48" "49" "50" "51" "53" "54" "55" "56", "60", "66", "69", "72", "78")
    # in geo but not pop: 60 66 69 72 78

declare -r url_geo_st="https://www2.census.gov/geo/tiger/TIGER2010/STATE/2010/tl_2010_us_state10.zip"
declare -r url_geo_co="https://www2.census.gov/geo/tiger/TIGER2010/COUNTY/2010/tl_2010_us_county10.zip"
declare -a url_geo_tr=("https://www2.census.gov/geo/tiger/TIGER2010/TRACT/2010/tl_2010_" "_tract10.zip")
declare -a url_geo_bg=("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_" "_bg10.zip")
declare -a url_geo_bl=("https://www2.census.gov/geo/tiger/TIGER2010/TABBLOCK/2010/tl_2010_" "_tabblock10.zip")

declare -a url_pop=("https://gitlab.com/momacs/dataset-pop-us-2010-midas/-/raw/master/zip/" ".zip")

declare -r sql_schema_dis="$(PG_SCHEMA_MAIN=${pg_schema_main} PG_SCHEMA_DIS=${pg_schema_dis} envsubst < ${dir_schemas}/${pg_schema_dis}.schema)"
declare -r sql_schema_geo="$(PG_SCHEMA_MAIN=${pg_schema_main} PG_SCHEMA_GEO=${pg_schema_geo} envsubst < ${dir_schemas}/${pg_schema_geo}.schema)"
declare -r sql_schema_main="$(PG_SCHEMA_MAIN=${pg_schema_main} envsubst < ${dir_schemas}/${pg_schema_main}.schema)"
declare -r sql_schema_pop="$(PG_SCHEMA_MAIN=${pg_schema_main} PG_SCHEMA_POP=${pg_schema_pop} envsubst < ${dir_schemas}/${pg_schema_pop}.schema)"
declare -r sql_schema_vax="$(PG_SCHEMA_MAIN=${pg_schema_main} PG_SCHEMA_VAX=${pg_schema_vax} envsubst < ${dir_schemas}/${pg_schema_vax}.schema)"
declare -r sql_schema_health="$(PG_SCHEMA_MAIN=${pg_schema_main} PG_SCHEMA_HEALTH=${pg_schema_health} envsubst < ${dir_schemas}/${pg_schema_health}.schema)"
declare -r sql_schema_weather="$(PG_SCHEMA_MAIN=${pg_schema_main} PG_SCHEMA_WEATHER=${pg_schema_weather} envsubst < ${dir_schemas}/${pg_schema_weather}.schema)"
declare -r sql_schema_mobility="$(PG_SCHEMA_MAIN=${pg_schema_main} PG_SCHEMA_MOBILITY=${pg_schema_mobility} envsubst < ${dir_schemas}/${pg_schema_mobility}.schema)"


# ----------------------------------------------------------------------------------------------------------------------
conf_yn() { read -p "$1 [y/n] " res; [ "$res" == "y" -o "$res" == "Y" ] && return 0 || return 1; }


# ----------------------------------------------------------------------------------------------------------------------
db_analyze() {
    echo -n "Analyzing the database..."
    $cmd_psql -c "VACUUM ANALYZE;"
    echo " done"
}


# ----------------------------------------------------------------------------------------------------------------------
#
# $1 flag: do force?
#
db_init() {
    [ "$1" != "1" ] && req_y "Reinitialize the database?"

    echo -n "Initializing data structures..."
    $cmd_dropdb   > $out #2>&1
    $cmd_createdb > $out #2>&1
    $cmd_psql -c "SET client_min_messages TO WARNING; CREATE EXTENSION IF NOT EXISTS postgis;"             > $out #2>&1
    $cmd_psql -c "SET client_min_messages TO WARNING; CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;" > $out #2>&1
    $cmd_psql -c "$sql_schema_main" > $out #2>&1
    $cmd_psql -c "$sql_schema_dis"  > $out #2>&1
    $cmd_psql -c "$sql_schema_geo"  > $out #2>&1
    $cmd_psql -c "$sql_schema_pop"  > $out #2>&1
    $cmd_psql -c "$sql_schema_vax"  > $out #2>&1
    $cmd_psql -c "$sql_schema_health"  > $out #2>&1
    $cmd_psql -c "$sql_schema_weather"  > $out #2>&1
    $cmd_psql -c "$sql_schema_mobility"  > $out #2>&1
    $cmd_psql -c "VACUUM FULL;"
    echo " done"

    echo -n "Loading locales..."
    $cmd_py load-main
    echo " done"
}


# ----------------------------------------------------------------------------------------------------------------------
#
# $1 flag: do force?
# $2 flag: do vacuum full?
#
db_init_dis() {
    [ "$1" != "1" ] && req_y "Reinitialize the disease dynamics part of the database?"
    $cmd_psql -c "$sql_schema_dis" > $out #2>&1
    [ "$2" != "0" ] || $cmd_psql -c "VACUUM FULL;"
}


# ----------------------------------------------------------------------------------------------------------------------
#
# $1 flag: do force?
# $2 flag: do vacuum full?
#
db_init_geo() {
    [ "$1" != "1" ] && req_y "Reinitialize the geographic part of the database?"
    $cmd_psql -c "$sql_schema_geo" > $out #2>&1
    [ "$2" != "0" ] || $cmd_psql -c "VACUUM FULL;"
}


# ----------------------------------------------------------------------------------------------------------------------
#
# $1 flag: do force?
# $2 flag: do vacuum full?
#
db_init_pop() {
    [ "$1" != "1" ] && req_y "Reinitialize the population part of the database?"
    $cmd_psql -c "$sql_schema_pop" > $out #2>&1
    [ "$2" != "0" ] || $cmd_psql -c "VACUUM FULL;"
}

# ----------------------------------------------------------------------------------------------------------------------
#
# $1: dir
# $2: file URL
#
fs_download_unzip() {
    return 0
}


# ----------------------------------------------------------------------------------------------------------------------
#
# $1: dir
# $2: file URL
#
fs_upd() {
    local fname=$(basename $2)

    cd $1
    rm -f ./${fname}.upd
    [ -f ./$fname ] && mv -f ./$fname ./${fname}.upd
    $cmd_dl $2
    rm -f ./${fname}.upd
}


# ----------------------------------------------------------------------------------------------------------------------
get_tbl_rec_cnt() { echo $($cmd_psql -t -c "SELECT COUNT(*) FROM $1.$2;" | sed -e '$d' | bc); }
get_int() { echo $($cmd_psql -t -c "$1" | sed -e '$d' | bc); }


# ----------------------------------------------------------------------------------------------------------------------
is_db_tbl() { echo $($cmd_psql -t -c "SELECT CASE WHEN (SELECT to_regclass('$1.$2')) IS NULL THEN 0 ELSE 1 END;"); }


# ----------------------------------------------------------------------------------------------------------------------
#
# Args:
#   $1 entity name
#   $2 file url
#   $3 database table
#   $4 state FIPS code [opt]
#
proc_item_geo() {
    [ "$3" == "st" -o "$3" == "co" ] && [ $(is_db_tbl $pg_schema_geo $3) -eq 1 ] && [ $(get_tbl_rec_cnt $pg_schema_geo $3) -gt 0 ] && return 0

    local fname=$(basename $2 .zip)

    # Download:
    local attempt=""
    local i=1
    while [ ! -f $dir_data_geo/$fname.zip ]; do
        echo -e -n "\r$1  downloading...$attempt"
        cd $dir_data_geo
        $cmd_dl $2
        if [ $? -ne 0 ]; then
            rm -f $dir_data_pop/$fname.zip
            rm $2
            i=$(echo "$i + 1" | bc)
            attempt=" (attempt $i)"
        fi
        cd - > /dev/null
    done

    # Process and load:
    echo -e -n "\r$1  loading...                    \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b"

    mkdir -p $dir_rt
    rm -fr $dir_rt/*

    unzip -q $dir_data_geo/$fname.zip -d $dir_rt

    [ "$4" != "" ] && $cmd_psql -c "DELETE FROM $pg_schema_geo.$3 WHERE statefp10 = '$4'"
    #$cmd_shp2pgsql/$fname.shp $pg_schema_geo.$3 2> $out | $cmd_psql > $out
    $cmd_shp2pgsql/$fname.shp $pg_schema_geo.$3 | $cmd_psql

    rm -fr $dir_rt/*
    echo -e "\r$1  done                                         "
}


# ----------------------------------------------------------------------------------------------------------------------
#
# Args:
#   $1 entity name
#   $2 file url
#   $3 state FIPS code
#
proc_item_pop() {
    local fname=$(basename $2 .zip)

    # Download:
    local attempt=""
    local i=1
    while [ ! -f $dir_data_pop/$fname.zip ]; do
        echo -e -n "\r$1  downloading...$attempt"
        cd $dir_data_pop
        curl -sO $2
        $cmd_dl $2
        if [ $? -ne 0 ]; then
            rm -f $dir_data_pop/$fname.zip
            i=$(echo "$i + 1" | bc)
            attempt=" (attempt $i)"
        fi
        cd - > /dev/null
    done

    # Process and load:
    echo -e -n "\r$1  loading...                    \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b"

    mkdir -p $dir_rt
    rm -fr $dir_rt/*

    unzip -q $dir_data_pop/$fname.zip -d $dir_rt

    #$cmd_py load-pop $3 > $out
    $cmd_py load-pop $3

    rm -fr $dir_rt/*
    echo -e "\r$1  done                                         "
}


# ----------------------------------------------------------------------------------------------------------------------
req_argn() { [ $1 -lt $2 ] && { echo "$usage $3"; exit 1; }; return 0; }
req_cmd() { command -v $1 >/dev/null 2>&1 || { echo >&2 "Command $1 not found."; exit 1; }; return 0; }
req_state_name() { [ "$1" != "-" ] && [[ ! " ${st_name[@]} " =~ " $1 " ]] && { echo >&2 "Invalid state abbreviation: '$1'"; exit 1; }; return 0; }
req_y() { read -p "$1 [y/n] " res; [ "$res" != "y" -a "$res" != "Y" ] && exit 1; return 0; }



# ----------------------------------------------------------------------------------------------------------------------
st_name2idx() { echo ${st_name[@]/$1//} | cut -d/ -f1 | wc -w | tr -d ' '; }
st_name2fips() { i=$(st_name2idx $1); echo "${st_fips[@]:$i:1}"; }


# ----------------------------------------------------------------------------------------------------------------------
case "$cmd" in
    "bash")
        bash
        ;;
    "db")
        case "$2" in
            "dump") eval $cmd_dump;;
            "conn") eval $cmd_psql;;
            "exec")
                req_argn $# 3 "$2 <sql-query>"
                # TODO: if [[ "$3" =~ .*"INSERT".* ]]; then
                $cmd_psql -t -c "$3"
                ;;
            "get-conn-str") echo $pg_conn_str;;
            "init") db_init $3;;
            "init-dis") db_init_dis $3;;
            "init-geo") db_init_geo $3;;
            "init-pop") db_init_pop $3;;
            "restore") $cmd_restore;;
            "rm")
                case "$3" in
                    "dis")
                        req_argn $# 4 "$2 $3 <COVID-19|H1N1> [force?]"
                        [ "$4" != "COVID-19" ] && [ "$4" != "H1N1" ] && { echo "Invalid disease: $3"; exit 1; }

                        [ "$5" != "1" ] && req_y "Remove all data for disease $4?"

                        $cmd_psql -c "
                            BEGIN;
                            DELETE FROM $pg_schema_dis.disease WHERE name = '$4';
                            --DELETE FROM $pg_schema_npi.type;
                            --DELETE FROM $pg_schema_npi.npi;
                            COMMIT;
                        "
                        db_analyze
                        ;;
                    "state")
                        req_argn $# 4 "$2 $3 <two-letter state code> [force?]"
                        req_state_name $4

                        [ "$5" != "1" ] && req_y "Remove all data for $4?"

                        $0 $cmd rm-state-geo $4 1 0
                        $0 $cmd rm-state-pop $4 1 0
                        db_analyze
                        ;;
                    "state-geo")
                        req_argn $# 4 "$2 $3 <two-letter state code> [force?]"
                        req_state_name $4

                        [ "$5" != "1" ] && req_y "Remove geographic data for $4?"

                        fips=$(st_name2fips $4)
                        $cmd_psql -c "
                            BEGIN;
                            DELETE FROM $pg_schema_geo.tr WHERE statefp10 = '$fips';
                            DELETE FROM $pg_schema_geo.bg WHERE statefp10 = '$fips';
                            DELETE FROM $pg_schema_geo.bl WHERE statefp10 = '$fips';
                            COMMIT;
                        "
                        [ "$6" != "0" ] && db_analyze
                        ;;
                    "state-pop")
                        req_argn $# 4 "$2 $3 <two-letter state code> [force?]"
                        req_state_name $4

                        [ "$5" != "1" ] && req_y "Remove population data for $4?"

                        fips=$(st_name2fips $4)
                        $cmd_psql -c "
                            BEGIN;
                            DELETE FROM $pg_schema_pop.school    x USING $pg_schema_main.locale l WHERE x.st_id = l.id AND l.fips = '$fips';
                            DELETE FROM $pg_schema_pop.hospital  x USING $pg_schema_main.locale l WHERE x.st_id = l.id AND l.fips = '$fips';
                            DELETE FROM $pg_schema_pop.household x USING $pg_schema_main.locale l WHERE x.st_id = l.id AND l.fips = '$fips';
                            DELETE FROM $pg_schema_pop.gq        x USING $pg_schema_main.locale l WHERE x.st_id = l.id AND l.fips = '$fips';
                            DELETE FROM $pg_schema_pop.workplace x USING $pg_schema_main.locale l WHERE x.st_id = l.id AND l.fips = '$fips';
                            COMMIT;
                        "
                        [ "$6" != "0" ] && db_analyze
                        ;;
                    *) echo "$usage $2 $3{state state-geo state-pop}" && exit 1;;
                esac;;
            *) echo "$usage $2{conn dump exec get-conn-str init init-dis-dyn init-geo init-pop restore rm}" && exit 1;;
        esac;;
    "fs")
        case "$2" in
            "clean") [ -d $dir_rt ] && rm -fr $dir_rt/*;;
            "rm-data")
                case "$3" in
                    "all")
                        req_y "Remove all downloaded data?"
                        rm -f $dir_data_geo/*
                        rm -f $dir_data_pop/*
                        ;;
                    "geo")
                        req_y "Remove downloaded geographic data (i.e., $dir_data_geo/)?"
                        rm -f $dir_data_geo/*
                        ;;
                    "pop")
                        req_y "Remove downloaded population data (i.e., $dir_data_pop/)?"
                        rm -f $dir_data_pop/*
                        ;;
                    *) echo "$usage $2{all geo pop}" && exit 1;;
                esac;;
            *) echo "$usage $2{clean rm-data}" && exit 1;;
        esac;;
    "help")
        echo ""
        echo "Usage: $self_name <command>"
        echo ""
        echo "Commands:"
        echo "  db           Perform database related tasks"
        echo "  fs           Perform filesystem related tasks"
        echo "  help         Print this message"
        echo "  info         Display filesystem, database server, and data information"
        echo "  load         Load data"
        echo "  setup        Setup and start LocaleDB"
        ;;
    "load")
        case "$2" in
            "air-traffic")
                req_argn $# 3 "$2 <year>"
                req_argn $# 4 "$2 <two-letter state code or - for all> [force?]"
                req_argn $# 5 "$2 <minimum passengers per flight>"
                $cmd_py load-air-traffic $3 $4 $5
                ;;
            "clinic")
                req_argn $# 3 "$2 <state or - for all> [Covid ActNow API key]"
                req_state_name $3

                $cmd_py load-clinic $3 "$4"
                ;;
            "dis")
                req_argn $# 3 "$2 <COVID-19|H1N1>"
                [ "$3" != "COVID-19" ] && echo "Invalid disease: $3" && exit 1

                $cmd_py load-dis $3
                ;;
            "geo")
                req_argn $# 3 "$2 <two-letter state code or - for all> [force?]"
                req_state_name $3

                if [ "$3" == "-" ]; then
                    db_init_geo 1

                    proc_item_geo "US states      " $url_geo_st st
                    proc_item_geo "US counties    " $url_geo_co co

                    for fips in "${st_fips[@]}"; do proc_item_geo "$3 tracts      " "${url_geo_tr[0]}$fips${url_geo_tr[1]}" tr $fips; done
                    for fips in "${st_fips[@]}"; do proc_item_geo "$3 block groups" "${url_geo_bg[0]}$fips${url_geo_bg[1]}" bg $fips; done
                    for fips in "${st_fips[@]}"; do proc_item_geo "$3 blocks      " "${url_geo_bl[0]}$fips${url_geo_bl[1]}" bl $fips; done
                else
                    fips=$(st_name2fips $3)

                    if [ "$4" != "1" ] && [ $(get_int "SELECT COUNT(*) FROM $pg_schema_geo.tr WHERE statefp10 = '$fips';") -gt 0 ]; then
                        conf_yn "Geographic data for that state already exists. Remove it and load again?" || exit 0
                    fi

                    proc_item_geo "US states      " $url_geo_st st
                    proc_item_geo "US counties    " $url_geo_co co

                    proc_item_geo "$3 tracts      " "${url_geo_tr[0]}$fips${url_geo_tr[1]}" tr $fips
                    proc_item_geo "$3 block groups" "${url_geo_bg[0]}$fips${url_geo_bg[1]}" bg $fips
                    proc_item_geo "$3 blocks      " "${url_geo_bl[0]}$fips${url_geo_bl[1]}" bl $fips
                fi

                db_analyze
                ;;
            "health")
                req_argn $# 3 "$2 <two-letter state code or - for all> [force?]"
                $cmd_py load-health $3
                ;;
            "mobility")
                req_argn $# 3 "$2 <two-letter state code or - for all> [force?]"
                $cmd_py load-mobility $3
                ;;
            "pop")
                req_argn $# 3 "$2 <two-letter state code or - for all> [force?]"
                req_state_name $3


                if [ "$3" == "-" ]; then
                    db_init_pop 1
                    for st in "${st_name[@]}"; do proc_item_pop "$st" "${url_pop[0]}$st${url_pop[1]}" $(st_name2fips $st); done
                else
                    fips=$(st_name2fips $3)

                    if [ "$4" != "1" ] && [ $(get_int "SELECT COUNT(*) FROM $pg_schema_pop.household h INNER JOIN $pg_schema_main.locale l ON l.id = h.st_id WHERE l.fips = '$fips';") -gt 0 ]; then
                        conf_yn "Population data for that state already exists. Remove it and load again?" || exit 0
                    fi

                    proc_item_pop "$3" "${url_pop[0]}$3${url_pop[1]}" $fips
                fi

                db_analyze
                ;;
            "weather")
                req_argn $# 3 "$2 <start year>"
                req_argn $# 4 "$2 <stop year>"
                $cmd_py load-weather $3 $4
                ;;
            "vax") $cmd_py load-vax;;
            *) echo "$usage $2{act-now air-traffic clinic dis geo health mobility pop weather vax}" && exit 1;;
        esac;;
    "info")
        case "$2" in
            "all")
                $0 $cmd fs
                $0 $cmd db
                $0 $cmd data
                ;;
            "data")
                echo "Data"
                echo "    Main"
                echo "        Locale count   "$(get_tbl_rec_cnt $pg_schema_main locale)
                echo "        Country count "$($cmd_psql -t -c "
                    SELECT COUNT(a.*) FROM (SELECT DISTINCT admin0 FROM $pg_schema_main.locale) a;
                ")
                echo "    Disease (COVID-19)"
                echo "        Dynamics"
                echo "            Locale count                 "$($cmd_psql -t -c "
                    SELECT COUNT(*) FROM (SELECT DISTINCT locale_id FROM $pg_schema_dis.dyn) a;
                ")
                echo "            Date range                   "$($cmd_psql -t -c "
                    SELECT CONCAT(MIN(day), ' ', MAX(day)) FROM $pg_schema_dis.dyn;
                ")
                echo "            Observation count             "$(get_tbl_rec_cnt $pg_schema_dis dyn)
                echo "            Observation count per locale "$($cmd_psql -t -c "
                    SELECT CONCAT(ROUND(AVG(a.n),2), ' (SD=', ROUND(STDDEV(a.n),2), ')') FROM
                        (SELECT COUNT(*) AS n FROM $pg_schema_dis.dyn GROUP BY locale_id) a;
                ")
                echo "        Non-pharmaceutical interventions"
                echo "            Locale count         "$($cmd_psql -t -c "
                    SELECT COUNT(*) FROM (SELECT DISTINCT locale_id FROM $pg_schema_dis.npi) a;
                ")
                echo "            Data range           "$($cmd_psql -t -c "
                    SELECT CONCAT(MIN(LEAST(begin_date, end_date)), ' ', MAX(GREATEST(begin_date, end_date))) FROM $pg_schema_dis.npi;
                ")
                echo "            NPI count             "$(get_tbl_rec_cnt $pg_schema_dis npi)
                echo "            NPI count per locale "$($cmd_psql -t -c "
                    SELECT CONCAT(ROUND(AVG(a.n),2), ' (SD=', ROUND(STDDEV(a.n),2), ')') FROM
                        (SELECT COUNT(*) AS n FROM $pg_schema_dis.npi GROUP BY locale_id) a;
                ")
                echo "            Count per type"
                a=$($cmd_psql -t -c "
                    SELECT CONCAT('               ', FORMAT('%-4s',COUNT(*)), '  ', t.name)
                    FROM $pg_schema_dis.npi n
                    INNER JOIN $pg_schema_dis.npi_type t ON n.type_id = t.id
                    GROUP BY t.id
                    ORDER BY COUNT(*) DESC;
                ")
                echo "$a"
                echo "    Flu Vaccinations"
                echo "        Total records  "$($cmd_psql -t -c "
                    SELECT COUNT(*) FROM $pg_schema_vax.vax;
                ")
                echo "        Date range     "$($cmd_psql -t -c "
                    SELECT CONCAT(MIN(START_YEAR), ' - ', MAX(END_YEAR)) FROM $pg_schema_vax.vax;
                ")
                echo "        Avg. Flu vaccination coverage per year"
                a=$($cmd_psql -t -c "
                    SELECT CONCAT('           ', stats.start_year, ':   ', stats.round, '%')
                    FROM   (SELECT start_year,
                                   ROUND(AVG(CAST(coverage AS NUMERIC)), 2)
                            FROM   $pg_schema_vax.vax
                            GROUP  BY start_year
                            ORDER  BY start_year) AS stats
                ")
                echo "$a"
                echo "    Health Data"
                echo "        Total records  "$($cmd_psql -t -c "
                    SELECT COUNT(*) FROM $pg_schema_health.health;
                ")
                echo "        Date range     "$($cmd_psql -t -c "
                    SELECT CONCAT(MIN(START_YEAR), ' - ', MAX(END_YEAR)) FROM $pg_schema_health.health;
                ")
                echo "    Weather Data"
                echo "        Total records  "$($cmd_psql -t -c "
                    SELECT COUNT(*) FROM $pg_schema_weather.weather;
                ")
                echo "        Date range     "$($cmd_psql -t -c "
                    SELECT CONCAT(MIN(YEAR), ' - ', MAX(YEAR)) FROM $pg_schema_weather.weather;
                ")
                echo "    Mobility Data"
                echo "        Total records  "$($cmd_psql -t -c "
                    SELECT COUNT(*) FROM $pg_schema_mobility.mobility;
                ")
                echo "        Date range     "$($cmd_psql -t -c "
                    SELECT CONCAT(MIN(TS), ' - ', MAX(TS)) FROM $pg_schema_mobility.mobility;
                ")
                echo "        Avg. daily percent of population leaving the home  "$($cmd_psql -t -c "
                    SELECT CONCAT(CAST(ROUND(AVG(pop_mobile)/(AVG(pop_home)+AVG(pop_mobile)),2)*100 AS INT), '%') FROM $pg_schema_mobility.mobility;
                ")
                echo "    Air traffic Data"
                echo "        Total records  "$($cmd_psql -t -c "
                    SELECT COUNT(*) FROM $pg_schema_mobility.airtraffic;
                ")
                echo "        Date range     "$($cmd_psql -t -c "
                    SELECT CONCAT(MIN(TS), ' - ', MAX(TS)) FROM $pg_schema_mobility.airtraffic;
                ")
                echo "    Geographic"
                echo "        States        "$(get_tbl_rec_cnt $pg_schema_geo st)
                echo "        Counties      "$(get_tbl_rec_cnt $pg_schema_geo co)
                echo "        Tracts        "$(get_tbl_rec_cnt $pg_schema_geo tr)
                echo "        Block groups  "$(get_tbl_rec_cnt $pg_schema_geo bg)
                echo "        Blocks        "$(get_tbl_rec_cnt $pg_schema_geo bl)
                echo "    Population"
                echo "        Schools           "$(get_tbl_rec_cnt $pg_schema_pop school)
                echo "        Hospitals         "$(get_tbl_rec_cnt $pg_schema_pop hospital)
                echo "        Households        "$(get_tbl_rec_cnt $pg_schema_pop household)
                echo "        General quarters  "$(get_tbl_rec_cnt $pg_schema_pop gq)
                echo "        Workplaces        "$(get_tbl_rec_cnt $pg_schema_pop workplace)
                echo "        People            "$(get_tbl_rec_cnt $pg_schema_pop person)
                echo "        People (GQ)       "$(get_tbl_rec_cnt $pg_schema_pop gq_person)
                #echo "        "$($cmd_psql -t -c "")
                ;;
            "db")
                echo "PostgreSQL server"
                echo "    Hostname  $pg_host"
                echo "    Port      $pg_port_ext"
                echo "    Database  $pg_db"
                echo "    Username  $pg_usr"
                echo "    Password  $pg_pwd"
                echo "    Conn str  postgresql://${pg_usr}:${pg_pwd}@${pg_host}:${pg_port_ext}/${pg_db}"
                ;;
            "fs")
                echo "Directory structure"
                echo "    Root               $dir_root           $(du -sh $dir_root     | awk 'END {print $1}')"
                echo "    Data: Disease      $dir_data_dis  $(du -sh $dir_data_dis | awk 'END {print $1}')"
                echo "    Data: Geographic   $dir_data_geo  $(du -sh $dir_data_geo | awk 'END {print $1}')"
                echo "    Data: Population   $dir_data_pop  $(du -sh $dir_data_pop | awk 'END {print $1}')"
                echo "    Log                $dir_log       $(du -sh $dir_log      | awk 'END {print $1}')"
                echo "    Runtime            $dir_rt        $(du -sh $dir_rt       | awk 'END {print $1}')"
                ;;
            *) echo "$usage $2{all data db fs}" && exit 1;;
        esac;;
    "setup")
        mkdir -p $dir_root
        mkdir -p $dir_bin
        mkdir -p $dir_data_dis
        mkdir -p $dir_data_geo
        mkdir -p $dir_data_health
        mkdir -p $dir_data_mobility
        mkdir -p $dir_data_pop
        mkdir -p $dir_data_weather
        mkdir -p $dir_data_vax
        mkdir -p $dir_log
        mkdir -p $dir_rt

        db_init 1
        ;;
    *) echo "Commands: bash db fs help info load setup";;
esac
